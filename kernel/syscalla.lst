     1                                  ;***************************************************************************
     2                                  ; 
     3                                  ;   syscall.asm-系统调用最外层接口，当发生系统调用
     4                                  ;   第一个调用的就是这个文件里的函数
     5                                  ;   Copyright (C) 2010 杨习辉
     6                                  ;**************************************************************************/
     7                                  
     8                                  ;定义在syscall.h中，系统调用函数表
     9                                  extern sys_call_table
    10                                  ;定义在fork.c中
    11                                  extern get_free_process
    12                                  extern copy_process
    13                                  
    14                                  global sys_call
    15                                  global sys_fork
    16                                  
    17                                  ;系统调用总数，必须跟syscall.h中的NR_SYS_CALLS一致
    18                                  NR_SYS_CALLS    equ     0
    19                                  
    20                                  sys_call:
    21                                      ;合法性验证，系统调用号放在eax中
    22 00000000 83F8FF                      cmp     eax,NR_SYS_CALLS - 1
    23 00000003 7738                        ja      .sys_call_ret
    24 00000005 83F800                      cmp     eax,0
    25 00000008 7233                        jb      .sys_call_ret
    26                                      
    27 0000000A 56                          push    esi
    28 0000000B 57                          push    edi
    29 0000000C 55                          push    ebp
    30 0000000D 1E                          push    ds
    31 0000000E 06                          push    es
    32 0000000F 0FA0                        push    fs
    33 00000011 0FA8                        push    gs
    34                                      
    35                                      ;将这些段寄存器指向内核，gs留为用户进程与内核通信用
    36 00000013 50                          push    eax
    37 00000014 B810000000                  mov     eax,0x10    ;内核段
    38 00000019 8ED8                        mov     ds,ax
    39 0000001B 8EC0                        mov     es,ax
    40 0000001D 8EE0                        mov     fs,ax
    41 0000001F B817000000                  mov     eax,0x17    ;用户段
    42 00000024 8EE8                        mov     gs,ax
    43 00000026 58                          pop     eax
    44                                      
    45                                      ;给真正的系统调用准备参数
    46                                      ;参数放在ebx,ecx,edx中，最多只能有三个参数
    47                                      ;如果参数过多，请设置指向一个数据结构的指针
    48                                      ;ebx,ecx,edx分别放着第一个，第二个，第三个参数
    49                                      
    50 00000027 52                          push    edx
    51 00000028 51                          push    ecx
    52 00000029 53                          push    ebx
    53                                      
    54                                      ;真正的系统调用，调用过后，eax中有返回值
    55 0000002A FF1485[00000000]            call    [sys_call_table + eax*4]
    56                                      
    57                                      ;清理堆栈
    58 00000031 5B                          pop     ebx
    59 00000032 59                          pop     ecx
    60 00000033 5A                          pop     edx
    61 00000034 0FA9                        pop     gs
    62 00000036 0FA1                        pop     fs
    63 00000038 07                          pop     es
    64 00000039 1F                          pop     ds
    65 0000003A 5D                          pop     ebp
    66 0000003B 5F                          pop     edi
    67 0000003C 5E                          pop     esi
    68                                      
    69                                  .sys_call_ret:
    70 0000003D CF                          iret
    71                                  ;----------------------------------------------------------------
    72                                  ;public int sys_fork(void)
    73                                  ;创建一个新进程 
    74                                  ;----------------------------------------------------------------
    75                                  sys_fork:
    76 0000003E E8(00000000)                call    get_free_process    ;查找空闲进程的索引
    77 00000043 83F800                      cmp     eax,0               ;如果返回值为零，则出错
    78 00000046 7405                        je      .label_exit         ;返回值为零退出
    79 00000048 E8(00000000)                call    copy_process        ;复制进程
    80                                  
    81                                  .label_exit:
    82 0000004D C3                          ret
